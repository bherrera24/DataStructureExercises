//Best time to buy and sell stock (121) Big notation O(n) 
/*
ðŸ‘‰ El patrÃ³n que debes identificar aquÃ­ es el de Sliding Window / Two Pointers.

Por quÃ©:
Necesitas encontrar el mÃ­nimo precio de compra hasta el dÃ­a actual, y calcular la mÃ¡xima ganancia posible vendiendo despuÃ©s.
Esto se resuelve moviendo un puntero que marca el "dÃ­a de compra mÃ­nimo visto hasta ahora", mientras otro avanza para calcular ganancias potenciales.

En otras palabras:

MantÃ©n un running minimum (precio mÃ¡s bajo visto hasta ahora).

A medida que recorres el array, en cada paso calculas precio_actual - min_price para ver si es la mejor ganancia hasta ese momento.

ðŸ”‘ PatrÃ³n: Sliding Window con un mÃ­nimo acumulado (tambiÃ©n puede verse como "Kadaneâ€™s Algorithm simplificado").
*/
const maxProfit=(prices)=>{
    let minPrice= Infinity;
    let maxProfit=0
    for(let i=0; i<prices.length; i++){
        if(prices[i]<minPrice)
            minPrice= prices[i]
        else{
           let currentProfit= prices[i]-minPrice
           if(maxProfit<currentProfit) maxProfit=currentProfit
        }
    }
    return maxProfit
}